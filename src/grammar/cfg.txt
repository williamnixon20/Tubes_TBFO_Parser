VALID -> MODULE_REP

MODULE_REP -> MODULE MODULE_REP
MODULE_REP -> MODULE

MODULE -> IF_MODULE
MODULE -> FOR_MODULE
MODULE -> WHILE_MODULE
MODULE -> SWITCH_MODULE
MODULE -> TRY_CATCH_MODULE
MODULE -> FUNCTION_MODULE
MODULE -> ASSIGNMENT
MODULE -> EXPR
MODULE -> THROW_STATEMENT
MODULE -> DELETE OBJ_ATTR

MODULE_REP_LOOP -> MODULE_LOOP MODULE_REP_LOOP
MODULE_REP_LOOP -> MODULE_LOOP

MODULE_LOOP -> IF_LOOP_MODULE
MODULE_LOOP -> FOR_MODULE
MODULE_LOOP -> WHILE_MODULE
MODULE_LOOP -> SWITCH_LOOP_MODULE
MODULE_LOOP -> TRY_CATCH_LOOP_MODULE
MODULE_LOOP -> FUNCTION_LOOP_MODULE
MODULE_LOOP -> ASSIGNMENT
MODULE_LOOP -> EXPR
MODULE_LOOP -> THROW_STATEMENT
MODULE_LOOP -> DELETE OBJ_ATTR
MODULE_LOOP -> CONTINUE
MODULE_LOOP -> BREAK

MODULE_REP_SWITCH -> MODULE_SWITCH MODULE_REP_SWITCH
MODULE_REP_SWITCH -> MODULE_SWITCH

MODULE_SWITCH -> IF_SWITCH_MODULE
MODULE_SWITCH -> FOR_MODULE
MODULE_SWITCH -> WHILE_MODULE
MODULE_SWITCH -> SWITCH_MODULE
MODULE_SWITCH -> TRY_CATCH_SWITCH_MODULE
MODULE_SWITCH -> FUNCTION_SWITCH_MODULE
MODULE_SWITCH -> ASSIGNMENT
MODULE_SWITCH -> EXPR
MODULE_SWITCH -> THROW_STATEMENT
MODULE_SWITCH -> DELETE OBJ_ATTR
MODULE_SWITCH -> BREAK

MODULE_REP_FUNC -> MODULE_FUNC MODULE_REP_FUNC
MODULE_REP_FUNC -> MODULE_FUNC

MODULE_FUNC -> IF_FUNC_MODULE
MODULE_FUNC -> FOR_FUNC_MODULE
MODULE_FUNC -> WHILE_FUNC_MODULE
MODULE_FUNC -> SWITCH_FUNC_MODULE
MODULE_FUNC -> TRY_CATCH_FUNC_MODULE
MODULE_FUNC -> FUNCTION_MODULE
MODULE_FUNC -> ASSIGNMENT
MODULE_FUNC -> EXPR
MODULE_FUNC -> THROW_STATEMENT
MODULE_FUNC -> DELETE OBJ_ATTR
MODULE_FUNC -> RETURN


MODULE_REP_FUNC_LOOP -> MODULE_FUNC_LOOP MODULE_REP_FUNC_LOOP
MODULE_REP_FUNC_LOOP -> MODULE_FUNC_LOOP

MODULE_FUNC_LOOP -> IF_FUNC_LOOP_MODULE
MODULE_FUNC_LOOP -> FOR_FUNC_MODULE
MODULE_FUNC_LOOP -> WHILE_FUNC_MODULE
MODULE_FUNC_LOOP -> SWITCH_FUNC_LOOP_MODULE
MODULE_FUNC_LOOP -> TRY_CATCH_FUNC_LOOP_MODULE
MODULE_FUNC_LOOP -> FUNCTION_LOOP_MODULE
MODULE_FUNC_LOOP -> ASSIGNMENT
MODULE_FUNC_LOOP -> EXPR
MODULE_FUNC_LOOP -> THROW_STATEMENT
MODULE_FUNC_LOOP -> DELETE OBJ_ATTR
MODULE_FUNC_LOOP -> RETURN
MODULE_FUNC_LOOP -> CONTINUE
MODULE_FUNC_LOOP -> BREAK

MODULE_REP_FUNC_SWITCH -> MODULE_FUNC_SWITCH MODULE_REP_FUNC_SWITCH
MODULE_REP_FUNC_SWITCH -> MODULE_FUNC_SWITCH

MODULE_FUNC_SWITCH -> IF_FUNC_SWITCH_MODULE
MODULE_FUNC_SWITCH -> FOR_FUNC_MODULE
MODULE_FUNC_SWITCH -> WHILE_FUNC_MODULE
MODULE_FUNC_SWITCH -> SWITCH_FUNC_SWITCH_MODULE
MODULE_FUNC_SWITCH -> TRY_CATCH_FUNC_SWITCH_MODULE
MODULE_FUNC_SWITCH -> FUNCTION_SWITCH_MODULE
MODULE_FUNC_SWITCH -> ASSIGNMENT
MODULE_FUNC_SWITCH -> EXPR
MODULE_FUNC_SWITCH -> THROW_STATEMENT
MODULE_FUNC_SWITCH -> DELETE OBJ_ATTR
MODULE_FUNC_SWITCH -> BREAK
MODULE_FUNC_SWITCH -> RETURN

VAR_DECLR -> LET
VAR_DECLR -> CONST
VAR_DECLR -> VAR

ASSIGNMENT -> VAR_DECLR VAR_NAME EQ EXPR
ASSIGNMENT -> VAR_NAME EQ EXPR

IF_STAT -> IF LP EXPR RP CL MODULE_REP CB
ELIF_STAT -> ELIF LP EXPR RP CL MODULE_REP CB
ELSE_STAT -> ELSE CL MODULE_REP CB
IF_STAT -> IF LP EXPR RP CL CB
ELIF_STAT -> ELIF LP EXPR RP CL CB
ELSE_STAT -> ELSE CL CB
ELIF_STAT_REP -> ELIF_STAT
ELIF_STAT_REP -> ELIF_STAT ELIF_STAT_REP
IF_MODULE -> IF_STAT
IF_MODULE -> IF_STAT ELSE_STAT
IF_MODULE -> IF_STAT ELIF_STAT_REP 
IF_MODULE -> IF_STAT ELIF_STAT_REP ELSE_STAT

TRY_STAT -> TRY CL MODULE_REP CB
TRY_STAT -> TRY CL CB
CATCH_STAT -> CATCH LP EXPR RP CL MODULE_REP CB
CATCH_STAT -> CATCH LP EXPR RP CL CB
FINALLY_STAT -> FINALLY CL MODULE_REP CB
FINALLY_STAT -> FINALLY CL CB
TRY_CATCH_MODULE -> TRY_STAT CATCH_STAT
TRY_CATCH_MODULE -> TRY_STAT CATCH_STAT FINALLY_STAT


FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL EXPR RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL EXPR RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL EXPR RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP SEMI_COL SEMI_COL EXPR RP CL MODULE_REP_LOOP CB
FOR_MODULE -> FOR LP SEMI_COL SEMI_COL RP CL MODULE_REP_LOOP CB

FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL EXPR RP CL CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL RP CL CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL RP CL CB
FOR_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL EXPR RP CL CB
FOR_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL EXPR RP CL CB
FOR_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL RP CL CB
FOR_MODULE -> FOR LP SEMI_COL SEMI_COL EXPR RP CL CB
FOR_MODULE -> FOR LP SEMI_COL SEMI_COL RP CL CB

WHILE_MODULE -> WHILE LP EXPR RP CL MODULE_REP_LOOP CB
WHILE_MODULE -> WHILE LP EXPR RP CL MODULE_REP_LOOP CB

IF_LOOP_STAT -> IF LP EXPR RP CL MODULE_REP_LOOP CB
IF_LOOP_STAT -> IF LP EXPR RP CL CB
ELIF_LOOP_STAT -> ELIF LP EXPR RP CL MODULE_REP_LOOP CB
ELIF_LOOP_STAT -> ELIF LP EXPR RP CL CB
ELSE_LOOP_STAT -> ELSE CL MODULE_REP_LOOP CB
ELSE_LOOP_STAT -> ELSE CL CB
ELIF_LOOP_STAT_REP -> ELIF_LOOP_STAT
ELIF_LOOP_STAT_REP -> ELIF_LOOP_STAT ELIF_LOOP_STAT_REP
IF_LOOP_MODULE -> IF_LOOP_STAT
IF_LOOP_MODULE -> IF_LOOP_STAT ELSE_LOOP_STAT
IF_LOOP_MODULE -> IF_LOOP_STAT ELIF_LOOP_STAT_REP 
IF_LOOP_MODULE -> IF_LOOP_STAT ELIF_LOOP_STAT_REP ELSE_LOOP_STAT

CASE_STAT_LOOP -> CASE EXPR COLON MODULE_REP_LOOP
CASE_STAT_LOOP -> CASE EXPR COLON
DEFAULT_STAT_LOOP -> DEFAULT COLON MODULE_REP_LOOP
DEFAULT_STAT_LOOP -> DEFAULT COLON
CASE_STAT_REP_LOOP -> CASE_STAT_LOOP
CASE_STAT_REP_LOOP -> CASE_STAT_LOOP CASE_STAT_REP_LOOP 
SWITCH_LOOP_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_LOOP CB
SWITCH_LOOP_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_LOOP DEFAULT_STAT_LOOP CB

TRY_STAT_LOOP -> TRY CL MODULE_REP_LOOP CB
TRY_STAT_LOOP -> TRY CL CB
CATCH_STAT_LOOP -> CATCH LP EXPR RP CL MODULE_REP_LOOP CB
CATCH_STAT_LOOP -> CATCH LP EXPR RP CL CB
FINALLY_STAT_LOOP -> FINALLY CL MODULE_REP_LOOP CB
FINALLY_STAT_LOOP -> FINALLY CL CB
TRY_CATCH_LOOP_MODULE -> TRY_STAT_LOOP CATCH_STAT_LOOP
TRY_CATCH_LOOP_MODULE -> TRY_STAT_LOOP CATCH_STAT_LOOP FINALLY_STAT_LOOP

TRY_STAT_SWITCH -> TRY CL MODULE_REP_SWITCH CB
TRY_STAT_SWITCH -> TRY CL CB
CATCH_STAT_SWITCH -> CATCH LP EXPR RP CL MODULE_REP_SWITCH CB
CATCH_STAT_SWITCH -> CATCH LP EXPR RP CL CB
FINALLY_STAT_SWITCH -> FINALLY CL MODULE_REP_SWITCH CB
FINALLY_STAT_SWITCH -> FINALLY CL CB
TRY_CATCH_SWITCH_MODULE -> TRY_STAT_SWITCH CATCH_STAT_SWITCH
TRY_CATCH_SWITCH_MODULE -> TRY_STAT_SWITCH CATCH_STAT_SWITCH FINALLY_STAT_SWITCH

TRY_STAT_LOOP -> TRY CL MODULE_REP_LOOP CB
TRY_STAT_LOOP -> TRY CL CB
CATCH_STAT_LOOP -> CATCH LP EXPR RP CL MODULE_REP_LOOP CB
CATCH_STAT_LOOP -> CATCH LP EXPR RP CL CB
FINALLY_STAT_LOOP -> FINALLY CL MODULE_REP_LOOP CB
FINALLY_STAT_LOOP -> FINALLY CL CB
TRY_CATCH_LOOP_MODULE -> TRY_STAT_LOOP CATCH_STAT_LOOP
TRY_CATCH_LOOP_MODULE -> TRY_STAT_LOOP CATCH_STAT_LOOP FINALLY_STAT_LOOP

CASE_STAT -> CASE EXPR COLON MODULE_REP_SWITCH
CASE_STAT -> CASE EXPR COLON
DEFAULT_STAT -> DEFAULT COLON MODULE_REP_SWITCH
DEFAULT_STAT -> DEFAULT COLON
CASE_STAT_REP -> CASE_STAT
CASE_STAT_REP -> CASE_STAT CASE_STAT_REP 
SWITCH_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP CB
SWITCH_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP DEFAULT_STAT CB

IF_SWITCH_STAT -> IF LP EXPR RP CL MODULE_REP_SWITCH CB
IF_SWITCH_STAT -> IF LP EXPR RP CL CB
ELIF_SWITCH_STAT -> ELIF LP EXPR RP CL MODULE_REP_SWITCH CB
ELIF_SWITCH_STAT -> ELIF LP EXPR RP CL CB
ELSE_SWITCH_STAT -> ELSE CL MODULE_REP_SWITCH CB
ELSE_SWITCH_STAT -> ELSE CL CB
ELIF_SWITCH_STAT_REP -> ELIF_SWITCH_STAT
ELIF_SWITCH_STAT_REP -> ELIF_SWITCH_STAT ELIF_SWITCH_STAT_REP
IF_SWITCH_MODULE -> IF_SWITCH_STAT
IF_SWITCH_MODULE -> IF_SWITCH_STAT ELSE_SWITCH_STAT
IF_SWITCH_MODULE -> IF_SWITCH_STAT ELIF_SWITCH_STAT_REP 
IF_SWITCH_MODULE -> IF_SWITCH_STAT ELIF_SWITCH_STAT_REP ELSE_SWITCH_STAT

FUNCTION_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL MODULE_REP_FUNC CB
FUNCTION_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL CB

IF_FUNC_STAT -> IF LP EXPR RP CL MODULE_REP_FUNC CB
IF_FUNC_STAT -> IF LP EXPR RP CL CB
ELIF_FUNC_STAT -> ELIF LP EXPR RP CL MODULE_REP_FUNC CB
ELIF_FUNC_STAT -> ELIF LP EXPR RP CL CB
ELSE_FUNC_STAT -> ELSE CL MODULE_REP_FUNC CB
ELSE_FUNC_STAT -> ELSE CL CB
ELIF_FUNC_STAT_REP -> ELIF_FUNC_STAT
ELIF_FUNC_STAT_REP -> ELIF_FUNC_STAT ELIF_FUNC_STAT_REP
IF_FUNC_MODULE -> IF_FUNC_STAT
IF_FUNC_MODULE -> IF_FUNC_STAT ELSE_FUNC_STAT
IF_FUNC_MODULE -> IF_FUNC_STAT ELIF_FUNC_STAT_REP 
IF_FUNC_MODULE -> IF_FUNC_STAT ELIF_FUNC_STAT_REP ELSE_FUNC_STAT

TRY_STAT_FUNC -> TRY CL MODULE_REP_FUNC CB
TRY_STAT_FUNC -> TRY CL CB
CATCH_STAT_FUNC -> CATCH LP EXPR RP CL MODULE_REP_FUNC CB
CATCH_STAT_FUNC -> CATCH LP EXPR RP CL CB
FINALLY_STAT_FUNC -> FINALLY CL MODULE_REP_FUNC CB
FINALLY_STAT_FUNC -> FINALLY CL CB
TRY_CATCH_FUNC_MODULE -> TRY_STAT_FUNC CATCH_STAT_FUNC
TRY_CATCH_FUNC_MODULE -> TRY_STAT_FUNC CATCH_STAT_FUNC FINALLY_STAT_FUNC

FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL EXPR RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL EXPR RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL EXPR RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL SEMI_COL EXPR RP CL MODULE_REP_FUNC_LOOP CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL SEMI_COL RP CL MODULE_REP_FUNC_LOOP CB

FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL EXPR RP CL CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL EXPR SEMI_COL RP CL CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL RP CL CB
FOR_FUNC_MODULE -> FOR LP ASSIGNMENT SEMI_COL SEMI_COL EXPR RP CL CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL EXPR RP CL CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL EXPR SEMI_COL RP CL CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL SEMI_COL EXPR RP CL CB
FOR_FUNC_MODULE -> FOR LP SEMI_COL SEMI_COL RP CL CB

WHILE_FUNC_MODULE -> WHILE LP EXPR RP CL MODULE_REP_FUNC_LOOP CB
WHILE_FUNC_MODULE -> WHILE LP EXPR RP CL CB


CASE_STAT_FUNC -> CASE EXPR COLON MODULE_REP_FUNC_SWITCH
CASE_STAT_FUNC -> CASE EXPR COLON
DEFAULT_STAT_FUNC -> DEFAULT COLON MODULE_REP_FUNC_SWITCH
DEFAULT_STAT_FUNC -> DEFAULT COLON
CASE_STAT_REP_FUNC -> CASE_STAT_FUNC
CASE_STAT_REP_FUNC -> CASE_STAT_FUNC CASE_STAT_REP_FUNC
SWITCH_FUNC_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC CB
SWITCH_FUNC_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC DEFAULT_STAT_FUNC CB

FUNCTION_LOOP_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL MODULE_REP_FUNC_LOOP CB
FUNCTION_LOOP_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL CB

FUNCTION_SWITCH_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL MODULE_REP_FUNC_SWITCH CB
FUNCTION_SWITCH_MODULE -> FUNCTION VAR_NAME LP EXPR_REP RP CL CB


IF_FUNC_LOOP_STAT -> IF LP EXPR RP CL MODULE_REP_FUNC_LOOP CB
IF_FUNC_LOOP_STAT -> IF LP EXPR RP CL CB
ELIF_FUNC_LOOP_STAT -> ELIF LP EXPR RP CL MODULE_REP_FUNC_LOOP CB
ELIF_FUNC_LOOP_STAT -> ELIF LP EXPR RP CL CB
ELSE_FUNC_LOOP_STAT -> ELSE CL MODULE_REP_FUNC_LOOP CB
ELSE_FUNC_LOOP_STAT -> ELSE CL CB
ELIF_FUNC_LOOP_STAT_REP -> ELIF_FUNC_LOOP_STAT
ELIF_FUNC_LOOP_STAT_REP -> ELIF_FUNC_LOOP_STAT ELIF_FUNC_LOOP_STAT_REP
IF_FUNC_LOOP_MODULE -> IF_FUNC_LOOP_STAT
IF_FUNC_LOOP_MODULE -> IF_FUNC_LOOP_STAT ELSE_FUNC_LOOP_STAT
IF_FUNC_LOOP_MODULE -> IF_FUNC_LOOP_STAT ELIF_FUNC_LOOP_STAT_REP 
IF_FUNC_LOOP_MODULE -> IF_FUNC_LOOP_STAT ELIF_FUNC_LOOP_STAT_REP ELSE_FUNC_LOOP_STAT

TRY_STAT_FUNC_LOOP -> TRY CL MODULE_REP_FUNC_LOOP CB
TRY_STAT_FUNC_LOOP -> TRY CL CB
CATCH_STAT_FUNC_LOOP -> CATCH LP EXPR RP CL MODULE_REP_FUNC_LOOP CB
CATCH_STAT_FUNC_LOOP -> CATCH LP EXPR RP CL CB
FINALLY_STAT_FUNC_LOOP -> FINALLY CL MODULE_REP_FUNC_LOOP CB
FINALLY_STAT_FUNC_LOOP -> FINALLY CL CB
TRY_CATCH_FUNC_LOOP_MODULE -> TRY_STAT_FUNC_LOOP CATCH_STAT_FUNC_LOOP
TRY_CATCH_FUNC_LOOP_MODULE -> TRY_STAT_FUNC_LOOP CATCH_STAT_FUNC_LOOP FINALLY_STAT_FUNC_LOOP


CASE_STAT_FUNC_LOOP -> CASE EXPR COLON MODULE_REP_FUNC_LOOP
CASE_STAT_FUNC_LOOP -> CASE EXPR COLON
DEFAULT_STAT_FUNC_LOOP -> DEFAULT COLON MODULE_REP_FUNC_LOOP
DEFAULT_STAT_FUNC_LOOP -> DEFAULT COLON
CASE_STAT_REP_FUNC_LOOP -> CASE_STAT_FUNC_LOOP
CASE_STAT_REP_FUNC_LOOP -> CASE_STAT_FUNC_LOOP CASE_STAT_REP_FUNC_LOOP
SWITCH_FUNC_MODULE_LOOP -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC_LOOP CB
SWITCH_FUNC_MODULE_LOOP -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC_LOOP DEFAULT_STAT_FUNC_LOOP CB

EXPR -> VAR_NAME LP EXPR_REP RP
EXPR_REP -> EXPR
EXPR_REP -> EXPR COMMA EXPR_REP
THROW_STATEMENT -> THROW STR
THROW_STATEMENT -> THROW EXPR

IF_FUNC_SWITCH_STAT -> IF LP EXPR RP CL MODULE_REP_FUNC_SWITCH CB
IF_FUNC_SWITCH_STAT -> IF LP EXPR RP CL CB
ELIF_FUNC_SWITCH_STAT -> ELIF LP EXPR RP CL MODULE_REP_FUNC_SWITCH CB
ELIF_FUNC_SWITCH_STAT -> ELIF LP EXPR RP CL CB
ELSE_FUNC_SWITCH_STAT -> ELSE CL MODULE_REP_FUNC_SWITCH CB
ELSE_FUNC_SWITCH_STAT -> ELSE CL CB
ELIF_FUNC_SWITCH_STAT_REP -> ELIF_FUNC_SWITCH_STAT
ELIF_FUNC_SWITCH_STAT_REP -> ELIF_FUNC_SWITCH_STAT ELIF_FUNC_SWITCH_STAT_REP
IF_FUNC_SWITCH_MODULE -> IF_FUNC_SWITCH_STAT
IF_FUNC_SWITCH_MODULE -> IF_FUNC_SWITCH_STAT ELSE_FUNC_SWITCH_STAT
IF_FUNC_SWITCH_MODULE -> IF_FUNC_SWITCH_STAT ELIF_FUNC_SWITCH_STAT_REP 
IF_FUNC_SWITCH_MODULE -> IF_FUNC_SWITCH_STAT ELIF_FUNC_SWITCH_STAT_REP ELSE_FUNC_SWITCH_STAT

CASE_STAT_FUNC_SWITCH -> CASE EXPR COLON MODULE_REP_FUNC_SWITCH
CASE_STAT_FUNC_SWITCH -> CASE EXPR COLON
DEFAULT_STAT_FUNC_SWITCH -> DEFAULT COLON MODULE_REP_FUNC_SWITCH
DEFAULT_STAT_FUNC_SWITCH -> DEFAULT COLON
CASE_STAT_REP_FUNC_SWITCH -> CASE_STAT_FUNC_SWITCH
CASE_STAT_REP_FUNC_SWITCH -> CASE_STAT_FUNC_SWITCH CASE_STAT_REP_FUNC_SWITCH 
SWITCH_FUNC_SWITCH_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC_SWITCH CB
SWITCH_FUNC_SWITCH_MODULE -> SWITCH LP EXPR RP CL CASE_STAT_REP_FUNC_SWITCH DEFAULT_STAT_FUNC_SWITCH CB

TRY_STAT_FUNC_SWITCH -> TRY CL MODULE_REP_FUNC_SWITCH CB
TRY_STAT_FUNC_SWITCH -> TRY CL CB
CATCH_STAT_FUNC_SWITCH -> CATCH LP EXPR RP CL MODULE_REP_FUNC_SWITCH CB
CATCH_STAT_FUNC_SWITCH -> CATCH LP EXPR RP CL CB
FINALLY_STAT_FUNC_SWITCH -> FINALLY CL MODULE_REP_FUNC_SWITCH CB
FINALLY_STAT_FUNC_SWITCH -> FINALLY CL CB
TRY_CATCH_FUNC_SWITCH_MODULE -> TRY_STAT_FUNC_SWITCH CATCH_STAT_FUNC_SWITCH
TRY_CATCH_FUNC_SWITCH_MODULE -> TRY_STAT_FUNC_SWITCH CATCH_STAT_FUNC_SWITCH FINALLY_STAT_FUNC_SWITCH

ELIF -> ELSE IF
COMMA -> comma
OBJ_ATTR -> obj_attr
COLON -> colon
VAR_NAME -> var_name
STR -> string
EQ -> eq
LP -> lp 
EXPR -> STR
EXPR -> expr
EXPR -> NULL
EXPR -> TRUE
EXPR -> FALSE
EXPR -> VAR_NAME
RP -> rp
CL -> cl
CB -> cb
BREAK -> break
CONST -> const
CASE -> case
CATCH -> catch
CONTINUE -> continue
DEFAULT -> default
DELETE -> delete
ELSE -> else
FALSE -> false
FINALLY -> finally
FOR -> for
FUNCTION -> function
IF -> if
LET -> let
NULL -> null
RETURN -> RETURN_VAR EXPR
RETURN -> return
RETURN_VAR -> RETURN
SWITCH -> switch
THROW -> throw
TRY -> try
TRUE -> true
VAR -> var
WHILE -> while
SEMI_COL -> semi_col